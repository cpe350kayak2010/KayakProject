
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d80  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000891  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002d  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b0  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000067  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000083  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000008b  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e5       	ldi	r30, 0x5E	; 94
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

unsigned char USART_Receive(void);

int main(void){
   /* Set pins as output, high->output, low->input */
   DDRB = 0;          /* Pin for serial in */
  ae:	14 b8       	out	0x04, r1	; 4
   DDRC = 1;          /* Pin for LED out */
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x6>

000000b6 <USART_Receive>:

   return 0;
}

unsigned char USART_Receive(void) {
   while (!(UCSR0B & (1<<RXC0)));
  b6:	80 91 c1 00 	lds	r24, 0x00C1
  ba:	87 ff       	sbrs	r24, 7
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <USART_Receive>

   return UDR0;
  be:	80 91 c6 00 	lds	r24, 0x00C6
}
  c2:	08 95       	ret

000000c4 <LCD_putchar>:
/*
 * This function writes data to the LCD. The parameter data is the data to write
 * to the LCD.
 */
void LCD_putchar(unsigned char data){
    PORTD = data;
  c4:	8b b9       	out	0x0b, r24	; 11
    PORTA |= (1<<RS);
  c6:	15 9a       	sbi	0x02, 5	; 2
    PORTA &= ~(1<<RW);
  c8:	16 98       	cbi	0x02, 6	; 2
    PORTA |= (1<<EN);
  ca:	17 9a       	sbi	0x02, 7	; 2
    PORTA &= ~(1<<EN);
  cc:	17 98       	cbi	0x02, 7	; 2
  ce:	88 ec       	ldi	r24, 0xC8	; 200
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_putchar+0xe>
  d6:	08 95       	ret

000000d8 <LCD_write>:

/*
 * This function writes the string of data to the LCD. The parameter str is
 * the string of data to write to the LCD.
 */
void LCD_write(char *str){
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <LCD_write+0xc>

     int i = 0;
     while(str[i])
       LCD_putchar(str[i++]);
  e0:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_putchar>
 * the string of data to write to the LCD.
 */
void LCD_write(char *str){

     int i = 0;
     while(str[i])
  e4:	89 91       	ld	r24, Y+
  e6:	88 23       	and	r24, r24
  e8:	d9 f7       	brne	.-10     	; 0xe0 <LCD_write+0x8>
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <LCD_command>:
 * This function sends commands to the LCD. The parameter com is the command
 * to send to the LCD.
 */
void LCD_command(unsigned char com){

    PORTD = com;
  f0:	8b b9       	out	0x0b, r24	; 11
    PORTA &= ~((1<<RS) | (1<<RW));
  f2:	82 b1       	in	r24, 0x02	; 2
  f4:	8f 79       	andi	r24, 0x9F	; 159
  f6:	82 b9       	out	0x02, r24	; 2
    PORTA |= (1<<EN);
  f8:	17 9a       	sbi	0x02, 7	; 2
    PORTA &= ~(1<<EN);
  fa:	17 98       	cbi	0x02, 7	; 2
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	97 e1       	ldi	r25, 0x17	; 23
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_command+0x10>
 104:	08 95       	ret

00000106 <LCD_init>:
 * This function initializes the LCD.
 */
void LCD_init(){

    /* Function Set: 2 Line, 8-bit, 5x7 dots */
    PORTD = 0x38;
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	8b b9       	out	0x0b, r24	; 11
    PORTA &= ~((1<<RS) | (1<<RW));
 10a:	82 b1       	in	r24, 0x02	; 2
 10c:	8f 79       	andi	r24, 0x9F	; 159
 10e:	82 b9       	out	0x02, r24	; 2
    PORTA |= (1<<EN);
 110:	17 9a       	sbi	0x02, 7	; 2
	PORTA &= ~(1<<EN);
 112:	17 98       	cbi	0x02, 7	; 2
 114:	25 e8       	ldi	r18, 0x85	; 133
 116:	82 2f       	mov	r24, r18
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_init+0x12>
    _delay_us(50);             /* Delay for 200 microseconds */
	
	/* Display on, Cursor off */
    PORTD = 0x0c;
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	8b b9       	out	0x0b, r24	; 11
	PORTA &= ~((1<<RS) | (1<<RW));
 120:	82 b1       	in	r24, 0x02	; 2
 122:	8f 79       	andi	r24, 0x9F	; 159
 124:	82 b9       	out	0x02, r24	; 2
    PORTA |= (1<<EN);
 126:	17 9a       	sbi	0x02, 7	; 2
	PORTA &= ~(1<<EN);
 128:	17 98       	cbi	0x02, 7	; 2
 12a:	82 2f       	mov	r24, r18
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_init+0x26>
    _delay_us(50);
	
	/* Clear Display */
    PORTD = 0x01;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8b b9       	out	0x0b, r24	; 11
	PORTA &= ~((1<<RS) | (1<<RW));
 134:	82 b1       	in	r24, 0x02	; 2
 136:	8f 79       	andi	r24, 0x9F	; 159
 138:	82 b9       	out	0x02, r24	; 2
    PORTA |= (1<<EN);
 13a:	17 9a       	sbi	0x02, 7	; 2
	PORTA &= ~(1<<EN);
 13c:	17 98       	cbi	0x02, 7	; 2
 13e:	80 e7       	ldi	r24, 0x70	; 112
 140:	97 e1       	ldi	r25, 0x17	; 23
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_init+0x3c>
    _delay_ms(3);                /* Delay for 5 milliseconds */
	
	/* Entry Mode: auto-increment cursor, no shift */
    PORTD = 0x06;
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	8b b9       	out	0x0b, r24	; 11
	PORTA &= ~((1<<RS) | (1<<RW));
 14a:	82 b1       	in	r24, 0x02	; 2
 14c:	8f 79       	andi	r24, 0x9F	; 159
 14e:	82 b9       	out	0x02, r24	; 2
    PORTA |= (1<<EN);
 150:	17 9a       	sbi	0x02, 7	; 2
	PORTA &= ~(1<<EN);
 152:	17 98       	cbi	0x02, 7	; 2
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_init+0x4e>
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
